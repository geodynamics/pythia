# Docker

trigger:
  - main

pool:
  vmImage: "ubuntu-20.04"

variables:
  IMAGE_REGISTRY: "ghcr.io/geodynamics/pylith_installer"

stages:
  - stage: basic_build
    displayName: "Basic Build"
    jobs:
      - job: debian_stable
        variables:
          BASE_IMAGE: "testenv-debian-stable"
          TEST_COVERAGE: "yes"
          PYTHON_COVERAGE: "coverage3"
        steps:
          - checkout: self
            submodules: "true"
          - task: Docker@2
            displayName: Build
            inputs:
              command: "build"
              Dockerfile: "docker/pythia-testenv"
              buildContext: $(Build.SourcesDirectory)
              arguments: "-t pythia-testenv --build-arg BASE_IMAGE=$(IMAGE_REGISTRY)/$(BASE_IMAGE) --build-arg TEST_COVERAGE=$(TEST_COVERAGE) --build-arg PYTHON_COVERAGE=$(PYTHON_COVERAGE) --target build"
              addPipelineData: false
              addBaseImageData: false
          - script: ci_env=`bash <(curl -s https://codecov.io/env)`; docker run $ci_env -e CI=true pythia-testenv ci-config/run_tests.sh
            displayName: Test
            env:
                CODECOV_TOKEN: $(codecovToken)
  - stage: other_platforms
    displayName: "Other Builds"
    jobs:
      - job: main
        strategy:
          matrix:
            debian_testing:
              BASE_IMAGE: "testenv-debian-testing"
            ubuntu_20.04:
              BASE_IMAGE: "testenv-ubuntu-20.04"
            ubuntu_22.04:
              BASE_IMAGE: "testenv-ubuntu-22.04"
            ubuntu_23.04:
              BASE_IMAGE: "testenv-ubuntu-23.04"
            fedora_37:
              BASE_IMAGE: "testenv-fedora-37"
            fedora_38:
              BASE_IMAGE: "testenv-fedora-38"
            centos_7:
              BASE_IMAGE: "testenv-centos-7"
            rockylinux_8:
              BASE_IMAGE: "testenv-rockylinux-8"
            rockylinux_9:
              BASE_IMAGE: "testenv-rockylinux-9"
        steps:
          - checkout: self
            submodules: "true"
          - task: Docker@2
            displayName: Build
            inputs:
              command: "build"
              Dockerfile: "docker/pythia-testenv"
              buildContext: $(Build.SourcesDirectory)
              arguments: "-t pythia-testenv --build-arg BASE_IMAGE=$(IMAGE_REGISTRY)/$(BASE_IMAGE) --target build"
              addPipelineData: false
              addBaseImageData: false
          - script: docker run pythia-testenv ci-config/run_tests.sh
            displayName: Test
